stages:
  - lint

Check OpenACC Style:
  variables:
    BEAUTIFIER_TAG: "v0.3.0"
    BEAUTIFIER_REPO: "https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.dkrz.de/dwd-sw/icon-openacc-beautifier.git"
    GIT_SUBMODULE_STRATEGY: none

  stage: lint

  before_script:
    - git clone --branch "${BEAUTIFIER_TAG}" --depth 1 "${BEAUTIFIER_REPO}"

  script:
    # Apply beautifier:
    - python3 icon-openacc-beautifier/main.py src/
    # Build git patch:
    - git diff --patch-with-raw > acc_style.patch
    # Test if patching is necessary:
    - test ! -s acc_style.patch || ( echo "There are ACC style errors. Please check
      your code. You might want to run the ACC beautifier or \`git apply acc_style.patch\`
      (see artifacts)." && false )

  tags:
    # Choose python capable runner:
    - sphinx

  # Run only for branches that are part of a merge request:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

  artifacts:
    paths:
      - acc_style.patch
    expire_in: 1 week
    expose_as: 'OpenACC Style Git Patch'
    when: on_failure

Check Style:
  variables:
    GIT_SUBMODULE_STRATEGY: normal

  stage: lint

  script:
    # TODO: we should check all ICON source files, as well as all source files
    # of the bundled libraries that are built as part of ICON:
    #   - externals/art
    #   - externals/dace_icon
    #   - externals/emvorado
    #   - externals/jsbach
    # However, we cannot currently do that because they will fail the tests.
    # Therefore, we check as many of them as possible:
    - ./scripts/ci_scripts/check_encoding.sh 'src' 'support'
    - ./scripts/ci_scripts/check_src_noexec.sh 'src' 'support'
    - ./scripts/ci_scripts/check_omp_sentinels.sh 'src' 'support' 'externals/jsbach' 'externals/emvorado' 'externals/art'
    - ./scripts/ci_scripts/check_license.sh

  tags:
    # Choose a runner with GNU find, GNU grep and bash:
    - conda

  # Run only for branches that are part of a merge request:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
