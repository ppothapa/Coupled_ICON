#!/bin/bash

set -eu
unset CDPATH

script_dir=$(cd "$(dirname "$0")"; pwd)
icon_dir=$(cd "${script_dir}/../.."; pwd)

modules='nvhpc/22.3'
sw_root='/sw/bullseye-x64/views/icon/nompi/nvhpc-22.3'

if test -r "${sw_root}/lib/librttov_main.a"; then
  RTTOV_LIBS='-lrttov_other -lrttov_emis_atlas -lrttov_brdf_atlas -lrttov_parallel -lrttov_coef_io -lrttov_hdf -lrttov_main'
else
  # The RTTOV license does not allow for a public installation. Therefore, only
  # members of the 'buildbot' group (40001) have read access to the RTTOV files
  # in ${sw_root}. To make the configure wrapper work for other users, we have
  # to set RTTOV_LIBS to an empty string. That, of course, means that other
  # users cannot use the wrapper as-is to build ICON with RTTOV. They need to
  # download (implies accepting the license) and install RTTOV themselves.
  RTTOV_LIBS=
  # Uncomment the following lines and set RTTOV_ROOT to the path to your
  # installation of RTTOV if you want to build ICON with it but do not have read
  # access to the installation in ${sw_root}:
  # RTTOV_ROOT='/path/to/rttov'
  # RTTOV_FCFLAGS="-I${RTTOV_ROOT}/mod -I${RTTOV}/include"
  # RTTOV_LDFLAGS="-L${RTTOV_ROOT}/lib"
  # RTTOV_LIBS='-lrttov_other -lrttov_emis_atlas -lrttov_brdf_atlas -lrttov_parallel -lrttov_coef_io -lrttov_hdf -lrttov_main'
fi

################################################################################

BUILD_ENV=". \"${ENV}\";. \"${script_dir}/module_switcher\"; switch_for_module ${modules}; export PATH=\"${sw_root}/bin:\${PATH-}\"; export LD_LIBRARY_PATH=\"${sw_root}/lib:\${LD_LIBRARY_PATH-}\"; export PYTHONPATH=\"${sw_root}/python/pp_ser:\${PYTHONPATH-}\";"

CC='nvc'
CFLAGS='-g -O2'
CPPFLAGS="-I${sw_root}/include -I${sw_root}/include/libxml2"

FC='nvfortran'
FCFLAGS="-I${sw_root}/include ${RTTOV_FCFLAGS-} -g -Mrecursive -Mallocatable=03"

common_ICON_FCFLAGS='-D__SWAPDIM'

ICON_FCFLAGS="-O ${common_ICON_FCFLAGS}"

LDFLAGS="-L${sw_root}/lib ${RTTOV_LDFLAGS-}"
# The configure scripts of some of the bundled libraries (e.g. SCT) are
# generated using original (non-patched) Libtool macros, which are not aware of
# NVidia HPC compilers. As a result, their libtool scripts do not keep the
# '-Wl,' prefix and pass the linker flags to the compiler without it. The
# compiler can handle some of them (e.g. '--as-needed') but chokes with some
# other (e.g. '--disable-new-dtags'). For consistency, we pass all flags that
# are meant for the linker only via ICON_LDFLAGS so that they are not passed to
# any libtool script:
ICON_LDFLAGS='-Wl,--disable-new-dtags -Wl,--as-needed'
LIBS="-lfyaml -lxml2 -lSerialboxFortran -leccodes_f90 -leccodes ${RTTOV_LIBS-} -llapack -lblas -lnetcdff -lnetcdf -lhdf5_hl_fortran -lhdf5_fortran -lhdf5 -lz"

EXTRA_CONFIG_ARGS='--disable-mpi --disable-coupling --enable-grib2'

################################################################################

"${icon_dir}/configure" \
BUILD_ENV="${BUILD_ENV}" \
CC="${CC}" \
CFLAGS="${CFLAGS}" \
CPPFLAGS="${CPPFLAGS}" \
FC="${FC}" \
FCFLAGS="${FCFLAGS}" \
ICON_FCFLAGS="${ICON_FCFLAGS}" \
ICON_LDFLAGS="${ICON_LDFLAGS}" \
LDFLAGS="${LDFLAGS}" \
LIBS="${LIBS}" \
${EXTRA_CONFIG_ARGS} \
"$@"

for arg in "$@"; do
  case $arg in
    -help | --help | --hel | --he | -h | -help=r* | --help=r* | --hel=r* | --he=r* | -hr* | -help=s* | --help=s* | --hel=s* | --he=s* | -hs*)
      test -n "${EXTRA_CONFIG_ARGS}" && echo '' && echo "This wrapper script ('$0') calls the configure script with the following extra arguments, which might override the default values listed above: ${EXTRA_CONFIG_ARGS}"
      exit 0 ;;
  esac
done

# Copy runscript-related files when building out-of-source:
if test $(pwd) != $(cd "${icon_dir}"; pwd); then
  echo "Copying runscript input files from the source directory..."
  rsync -uavz ${icon_dir}/run . --exclude='*.in' --exclude='.*' --exclude='standard_*'
  ln -sf -t run/ ${icon_dir}/run/standard_*
  rsync -uavz ${icon_dir}/externals . --exclude='.git' --exclude='*.f90' --exclude='*.F90' --exclude='*.c' --exclude='*.h' --exclude='*.Po' --exclude='tests' --exclude='*.mod' --exclude='*.o'
  rsync -uavz ${icon_dir}/make_runscripts .
  ln -sf ${icon_dir}/data
  ln -sf ${icon_dir}/vertical_coord_tables
fi

