#!/bin/bash

set -eu
unset CDPATH

script_dir=$(cd "$(dirname "$0")"; pwd)
icon_dir=$(cd "${script_dir}/../.."; pwd)

modules='PrgEnv-cray craype/2.7.20 cce/15.0.1 cray-mpich/8.1.27 cray-libsci/23.02.1.1 libfabric craype-x86-rome craype-accel-amd-gfx90a rocm cray-hdf5 cray-netcdf'

sw_root=${ICON_SW_PREFIX-'/project/project_465000454/icon/sw/cce-15.0.1-zen2'}

echo "Using software stack from ${sw_root}"

ECCODES_ROOT="${sw_root}/eccodes-2.24.2"
ECCODES_LIBS='-leccodes'

FYAML_ROOT="${sw_root}/libfyaml-0.8"
FYAML_LIBS='-lfyaml'

XML2_ROOT="${sw_root}/libxml2-2.10.1"
XML2_LIBS='-lxml2'

################################################################################

BUILD_ENV="module load ${modules}; export LD_LIBRARY_PATH=\"${ECCODES_ROOT}/lib64:${FYAML_ROOT}/lib:${XML2_ROOT}/lib:\${LD_LIBRARY_PATH}\";"

CC='cc'
CPPFLAGS="-I${ECCODES_ROOT}/include -I${FYAML_ROOT}/include -I${XML2_ROOT}/include/libxml2"
CFLAGS='-g -gdwarf-4'
ICON_CFLAGS='-O3'
ICON_BUNDLED_CFLAGS='-O2'

FC='ftn'
FCFLAGS="-hadd_paren -Ktrap=divz,ovf,inv -hflex_mp=intolerant -hfp1 -g"

HIPFLAGS='--offload-arch=gfx90a -g -O3'

# It takes ages (if at all) to compile
# externals/jsbach/src/base/mo_jsb_process_factory.f90 with optimization level
# other than -O0 (!$dir optimize(-O0) does not help either). It still takes
# ~10min if the GPU support is enabled.
ICON_O0_PATH='externals/jsbach/src/base/mo_jsb_process_factory_core.f90'
ICON_O0_FCFLAGS='-O0'

# We might need compiler diagnostic output for certain source files (to be set
# on the command line when calling this wrapper as an extra argument
# ICON_DIAG_PATH='<file1>:<file2>', where <file1>:<files2> is a colon-separated
# list of relative paths to the files of interest):
ICON_DIAG_FCFLAGS='-hlist=a'

LDFLAGS="-L${ECCODES_ROOT}/lib64 -L${FYAML_ROOT}/lib -L${XML2_ROOT}/lib"

# The compiler does not inject RPATHs to several runtime libraries (e.g.
# libamdhip64.so and libfabric.so), therefore we generate the required flags
# based on the LD_LIBRARY_PATH variable set by the modules that are loaded in
# BUILD_ENV (we should be using CRAY_LD_LIBRARY_PATH instead but not all
# modules set it):
extra_rpath_dirs=$(unset LD_LIBRARY_PATH; { eval "${BUILD_ENV}"; } >/dev/null; echo "${LD_LIBRARY_PATH}")
ICON_LDFLAGS="-Wl,--disable-new-dtags -Wl,--as-needed -Wl,-rpath,${extra_rpath_dirs}"

# Note that generated list of flags will contain RPATHs to the custom libraries
# because BUILD_ENV not only loads the modules but also extends the
# LD_LIBRARY_PATH variable for the configure scripts and test suites of the
# bundled libraries to work. Therefore, we configure ICON with --disable-rpaths
# to avoid duplicate RPATH entries in the ICON executable:
EXTRA_CONFIG_ARGS='--disable-rpaths --enable-dim-swap'

LIBS="${XML2_LIBS} ${FYAML_LIBS} ${ECCODES_LIBS}"

# OpenACC code generated by the compiler depends on the OpenMP runtime library
# but the compiler does not link to it:
LIBS+=' -lcraymp'

EXTRA_CONFIG_ARGS+=' --disable-mpi-checks --enable-gpu=openacc+hip --enable-mpi-gpu --enable-jsbach --enable-rte-rrtmgp --enable-grib2 --enable-fcgroup-O0 --enable-fcgroup-DIAG --enable-coupling'

################################################################################

"${icon_dir}/configure" \
BUILD_ENV="${BUILD_ENV}" \
CC="${CC}" \
CFLAGS="${CFLAGS}" \
CPPFLAGS="${CPPFLAGS}" \
FC="${FC}" \
FCFLAGS="${FCFLAGS}" \
HIPFLAGS="${HIPFLAGS}" \
ICON_BUNDLED_CFLAGS="${ICON_BUNDLED_CFLAGS}" \
ICON_CFLAGS="${ICON_CFLAGS}" \
ICON_DIAG_FCFLAGS="${ICON_DIAG_FCFLAGS}" \
ICON_LDFLAGS="${ICON_LDFLAGS}" \
ICON_O0_FCFLAGS="${ICON_O0_FCFLAGS}" \
ICON_O0_PATH="${ICON_O0_PATH}" \
LDFLAGS="${LDFLAGS}" \
LIBS="${LIBS}" \
${EXTRA_CONFIG_ARGS} \
"$@"

for arg in "$@"; do
  case $arg in
    -help | --help | --hel | --he | -h | -help=r* | --help=r* | --hel=r* | --he=r* | -hr* | -help=s* | --help=s* | --hel=s* | --he=s* | -hs*)
      test -n "${EXTRA_CONFIG_ARGS}" && echo '' && echo "This wrapper script ('$0') calls the configure script with the following extra arguments, which might override the default values listed above: ${EXTRA_CONFIG_ARGS}"
      exit 0 ;;
  esac
done

# Copy runscript-related files when building out-of-source:
if test $(pwd) != $(cd "${icon_dir}"; pwd); then
  echo "Copying runscript input files from the source directory..."
  PATH="${sw_root}/../gcc-11.2.0-zen2/rsync-3.2.3/bin:${PATH}"
  rsync -uavz ${icon_dir}/run . --exclude='*.in' --exclude='.*' --exclude='standard_*'
  ln -sf -t run/ ${icon_dir}/run/standard_*
  ln -sf set-up.info run/SETUP.config
  rsync -uavz ${icon_dir}/externals . --exclude='.git' --exclude='*.f90' --exclude='*.F90' --exclude='*.c' --exclude='*.h' --exclude='*.Po' --exclude='tests' --exclude='*.mod' --exclude='*.o'
  rsync -uavz ${icon_dir}/make_runscripts .
  ln -sf ${icon_dir}/data
  ln -sf ${icon_dir}/vertical_coord_tables
fi

