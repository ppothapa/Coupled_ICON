#!/bin/bash

set -eu
unset CDPATH
ulimit -c 0

SCRIPT_DIR=$(cd "$(dirname "$0")"; pwd)
ICON_DIR=$(cd "${SCRIPT_DIR}/../.."; pwd)

SW_ROOT='/sw/spack-levante'

GCC_ROOT="${SW_ROOT}/gcc-11.2.0-bcn7mb"

HDF5_ROOT="${SW_ROOT}/hdf5-1.12.1-wtqfdz"
HDF5_LIBS='-lhdf5_hl_fortran -lhdf5_fortran -lhdf5'

NETCDF_ROOT="${SW_ROOT}/netcdf-c-4.8.1-nt6joa"
NETCDF_LIBS='-lnetcdf'

NETCDFF_ROOT="${SW_ROOT}/netcdf-fortran-4.5.3-ojzrgm"
NETCDFF_LIBS='-lnetcdff'

MKL_ROOT="${SW_ROOT}/intel-oneapi-mkl-2022.0.1-ttdktf/mkl/2022.0.1"
MKL_LDFLAGS="-L${MKL_ROOT}/lib/intel64  -Wl,-rpath -Wl,${MKL_ROOT}/lib/intel64"
MKL_LIBS="-Wl,--no-as-needed -lmkl_gf_lp64  -lmkl_sequential -lmkl_core -lpthread -lm -ldl"
MKL_FCFLAGS="-m64  -I${MKL_ROOT}/include"

XML2_ROOT='/usr'
XML2_LIBS='-lxml2'

PYTHON='/usr/bin/python3'

MPI_ROOT="${SW_ROOT}/openmpi-4.1.2-hzabdh"

NV_ROOT="${SW_ROOT}/nvhpc-22.5-v4oky3/Linux_x86_64/22.5"
CUDA_ROOT="${NV_ROOT}/cuda"

################################################################################

BUILD_ENV="export LD_LIBRARY_PATH=\"${NV_ROOT}/compilers/lib:${NV_ROOT}/comm_libs/mpi/lib:${CUDA_ROOT}/lib64:${HDF5_ROOT}/lib:${NETCDF_ROOT}/lib:${NETCDFF_ROOT}/lib:${MKL_ROOT}/lib/intel64:${SW_ROOT}/gcc-11.2.0-bcn7mb/lib64:\${LD_LIBRARY_PATH}\";"

CC="${MPI_ROOT}/bin/mpicc"
CFLAGS="-g -march=native -L${GCC_ROOT}/lib64 -lstdc++"
ICON_CFLAGS='-O2'
ICON_BUNDLED_CFLAGS='-O2'
CPPFLAGS="-I${HDF5_ROOT}/include -I${NETCDF_ROOT}/include -I${XML2_ROOT}/include/libxml2 ${MKL_FCFLAGS}"

FC="${MPI_ROOT}/bin/mpif90"
FCFLAGS="-g -I${NETCDFF_ROOT}/include -L${GCC_ROOT}/lib64 -lstdc++ -Mallocatable=03 -acc=verystrict -Minfo=accel,inline -gpu=cc80,math_uniform,cuda11.7 -D__SWAPDIM -D__USE_G2G -O2 -Mnofma "

LDFLAGS="-L${NV_ROOT}/compilers/lib -Wl,-rpath -Wl,${NV_ROOT}/compilers/lib -L${HDF5_ROOT}/lib -L${NETCDF_ROOT}/lib -L${NETCDFF_ROOT}/lib -L${XML2_ROOT}/lib ${MKL_LDFLAGS} -L${CUDA_ROOT}/lib64"
LIBS="-Wl,--as-needed ${XML2_LIBS} ${MKL_LIBS} ${NETCDFF_LIBS} ${NETCDF_LIBS} ${HDF5_LIBS} -lcudart -lnvhpcwrapnvtx"

MPI_LAUNCH="${MPI_ROOT}/bin/mpiexec"

NVCC="${NV_ROOT}/compilers/bin/nvcc"
NVCFLAGS='-arch=sm_80 -g -O2 -g'

EXTRA_CONFIG_ARGS='--disable-atmo --disable-jsbach --disable-rte-rrtmgp --disable-coupling --enable-parallel-netcdf --disable-loop-exchange --disable-claw --enable-gpu --disable-mpi-checks --disable-openmp '

################################################################################

"${ICON_DIR}/configure" \
PYTHON="${PYTHON}" \
BUILD_ENV="${BUILD_ENV}" \
CC="${CC}" \
CFLAGS="${CFLAGS}" \
CPPFLAGS="${CPPFLAGS}" \
FC="${FC}" \
FCFLAGS="${FCFLAGS}" \
LDFLAGS="${LDFLAGS}" \
LIBS="${LIBS}" \
MPI_LAUNCH="${MPI_LAUNCH}" \
NVCC="${NVCC}" \
NVCFLAGS="${NVCFLAGS}" \
${EXTRA_CONFIG_ARGS} \
"$@"

for arg in "$@"; do
  case $arg in
    -help | --help | --hel | --he | -h | -help=r* | --help=r* | --hel=r* | --he=r* | -hr* | -help=s* | --help=s* | --hel=s* | --he=s* | -hs*)
      test -n "${EXTRA_CONFIG_ARGS}" && echo '' && echo "This wrapper script ('$0') calls the configure script with the following extra arguments, which might override the default values listed above: ${EXTRA_CONFIG_ARGS}"
      exit 0 ;;
  esac
done

# Copy runscript-related files when building out-of-source:
if test $(pwd) != $(cd "${ICON_DIR}"; pwd); then
  echo "Copying runscript input files from the source directory..."
  rsync -uavz ${ICON_DIR}/run . --exclude='*.in' --exclude='.*' --exclude='standard_*'
  ln -sf -t run/ ${ICON_DIR}/run/standard_*
  ln -sf set-up.info run/SETUP.config
  rsync -uavz ${ICON_DIR}/externals . --exclude='.git' --exclude='*.f90' --exclude='*.F90' --exclude='*.c' --exclude='*.h' --exclude='*.Po' --exclude='tests' --exclude='rrtmgp*.nc' --exclude='*.mod' --exclude='*.o'
  rsync -uavz ${ICON_DIR}/make_runscripts .
  ln -sf ${ICON_DIR}/data
  ln -sf ${ICON_DIR}/vertical_coord_tables
fi

