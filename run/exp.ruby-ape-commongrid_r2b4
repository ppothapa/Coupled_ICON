# ICON
#
# ------------------------------------------
# Copyright (C) 2004-2024, DWD, MPI-M, DKRZ, KIT, ETH, MeteoSwiss
# Contact information: icon-model.org
# See AUTHORS.TXT for a list of authors
# See LICENSES/ for license information
# SPDX-License-Identifier: BSD-3-Clause
# ------------------------------------------

#==================================================================================================
#
# ICON-ESM Aquaplanet Experiment (APE) Ruby atmosphere coupled to ocean on identical R2B4 grid
#
author_list="Stephan Lorenz, Lennart Ramme, Monika Esch, Rene Redler"
#
#--------------------------------------------------------------------------------------------------
#
# exp.ruby-ape-commongrid_r2b4
#
# Basic test case for the ICON-Ruby coupled to the ICON-O on an Aquaplanet.
#
# This basic coupled test case (Prototype 1) computes a few days of a
# global atmosphere climate model (ICON-A) coupled to a global ocean (ICON-O).
# The system is based an an ICON-Ruby set up on a common grid without land
# (Aquaplanet Experiment, APE) in 160 km resolution (R2B04), initialized at 1979-01-01.
# The purpose is the technical testing of the APE coupled setup.
#
# This section of the run script contains the specifications of the experiment.
# The specifications are passed by namelist to the program.
# For a complete list see Namelist_overview.pdf
#
# Initial revision: 2021-06-27, S. Lorenz, MPI-M
#
#--------------------------------------------------------------------------------------------------

# Variables provided by the scripting mechanism

# EXPNAME                       = name of exp. in 'exp.<name>'
# basedir                       = base directory, where src/, run/ etc exist
# icon_data_poolFolder          = base directory, where grids/, input/ and setup/ exist
# nproma                        = blocking length for array dimensioning and inner loop lengths
#                                 -> deprecated. nproma_atm and nproma_oce are used here.

#icon_data_poolFolder="/work/mh0287/m211032/Icon/Coupled/NWP_Coupling/Input_Prototype/APE"  # preliminary

# nproma = blocking length for array dimensioning and inner loop lengths
nproma_atm=16
nproma_oce=16

# unset some setting of create_target_header for mistral
unset OMPI_MCA_coll_fca_enable
unset OMPI_MCA_coll_fca_priority

# (1) Basic model configuration
# -----------------------------

atmos_gridID="0043"
atmos_refinement="R02B04"

ocean_gridID="0043"
ocean_refinement="R02B04"
#
#--------------------------------------------------------------------------------------------------
#
# (2) Define the model time stepping
# ----------------------------------

radTimeStep="PT90M"              # radiation time step:    16 time steps per day
atmTimeStep="PT15M"              # atmosphere time step:   96 time steps per day
atm_substeps=8                   # atmosphere dynamics substeps, ca. 2 min for atm-dyn-stepping
oceTimeStep="PT45M"              # ocean time step:        32 time steps per day
couplingTimeStep="PT45M"         # coupling time step:      2 time steps per radTimeStep 

#--------------------------------------------------------------------------------------------------

# (3) Set variables to configure the experiment:
# ----------------------------------------------

# start and end date+time of experiment
# -------------------------------------
start_date=${start_date:="2000-01-01T00:00:00Z"}
    end_date=${end_date:="2000-01-05T00:00:00Z"}

# distribution of nodes
# ---------------------

# at least one node for ocean and atmosphere each is necessary
# default: half of requested nodes for ocean
mpi_oce_nodes=1
mpi_oce_nodes=${mpi_oce_nodes:=((no_of_nodes/2))}  
((mpi_oce_procs=mpi_oce_nodes * mpi_procs_pernode))

# asynchronous diagnostic output processes
# ----------------------------------------

# Note that "mpi_atm_io_procs" must match the number of output files
mpi_atm_io_procs=0      # >0 for atmosphere plus land (not working for monitoring)
mpi_oce_io_procs=0      # >0 for ocean is not working yet

# initialization/restart
# ----------------------
#
# Use alternatively:
# initialiseOcean="fromRestart"        # ocean is setup from restart-file, atmosphere initialised from scratch
  initialiseOcean="fromClimatology"    # ocean is setup from climatology, atmosphere initialised from scratch
# initialiseOcean="fromExperiment"     # atmos and ocean restarts from experiment specified below
# restart=.true.                       # deactivate semaphore mechanism - use restart files for atmos and ocean

# variables for start from an existing experiment (use restart=.true.)
#  - is not yet be used automatically
restart_dir=".."   #  from the same experiment directory
restart_exp=slo14xx
restart_yea=1980

# set initialiseOcean automatically to false via semaphore mechanism (isRestartRun.sem)
if [ -d "$basedir/experiments/$EXPNAME" ] ; then
  if [ -f "$basedir/experiments/$EXPNAME/isRestartRun.sem" ]; then
    initialiseOcean="FALSE"
  fi
fi

#--------------------------------------------------------------------------------------------------

# (4) Output and restart file selection
# -------------------------------------

# restart/file/output intervals
# -----------------------------

# experiment stops after restart_interval, restart and output files are written once per job
restart_interval="P2D"                             #  test run 30 min
#restart_interval="P10Y"                            #  production run

# file interval must be longer than restart-interval - add some time!
atm_file_interval="P50Y"
oce_file_interval="P50Y"
lnd_file_interval="P50Y"
hamocc_file_interval="P50Y"

# output interval
all_output_interval="PT6H"     # short test
#all_output_interval="P1M"      # production
#all_output_interval="P1Y"      # production, reduced output

# output file selection
# ---------------------
# output_<xyz>=yes : yes --> output files for <xyz>, any other value --> no files for <xyz>

# monitoring output switches
output_atm_mon=yes
output_oce_mon=yes

# ocean output switches
output_oce_moc=yes      #  calc_moc is called every timestep - switch off for high resolutions
output_oce_ice=yes      #  sea-ice, SST and some deeper levels

# standard debug-flux arrays at surface for coupling debug purpose
output_atm_dbg=no 
output_oce_dbg=no 
output_oce_moc=yes      #  calc_moc is called every timestep - switch off for high resolutions

# sea ice, snow, SST and some deeper levels ocean output
output_oce_ice=yes 

# output time of geometry file fx:
start_fx="2000-01-02T00:00:00Z"

# output switches for large atm/oce files - set to "yes" if needed for standard quickplots
#  - yes writes much output and needs more computing time at least in high resolution
output_atm_3d=yes
output_atm_2d=yes
output_atm_cgrid=no            # produces 1 atm file 
output_phy_3d=no               # atmosphere physics, note: "yes" increases the output volume significantly!
output_oce_def=yes             # annual mean is sufficient
oce_output_interval_def="P1Y"  # annual mean output for deep ocean
# monthly output interval for at least monitoring output if all_output is annual - used for hamocc
mon_output_interval="P1M"

# more specs
atm_output_interval=$all_output_interval
oce_output_interval=$all_output_interval

# output interval for large atm/oce files, normally set to general interval:
atm_output_interval_3d="$atm_output_interval"
atm_output_interval_2d="$atm_output_interval"
checkpoint_interval="P50Y"     #  write checkpoint

# output switches for HAMOCC files
output_hamocc_mon=yes
output_hamocc_base=yes    # very large
output_hamocc_EU=no      # large
output_hamocc_sed=yes     # large
output_hamocc_2d=yes
output_hamocc_3d=no
hamocc_output_interval="P1Y"

# namelist files
# --------------
atm_namelist=NAMELIST_${EXPNAME}_atm
oce_namelist=NAMELIST_${EXPNAME}_oce

read_restart_namelists=".false."

#--------------------------------------------------------------------------------------------------

# (5) horizontal grids for atmos and ocean
# ----------------------------------------

#atmos_grid_name=icon_grid_${atmos_gridID}_${atmos_refinement}_G
#atmos_grid_folder=${icon_data_poolFolder}/${atmos_gridID}
#atmos_data_InputFolder=${icon_data_poolFolder}/${atmos_gridID}
#atmos_dyn_grid=${atmos_grid_name}.nc

atmos_grid_folder="/work/mh0287/m211032/Icon/Coupled/NWP_Coupling/Input_Prototype/APE"  # preliminary
atmos_grid_source="icon_grid_${atmos_gridID}_${atmos_refinement}_G_ape_8km.nc"
atmos_grid_target=$atmos_grid_source

# Ocean grid

# Common Grid coupling: using same grid for atmos and ocean:
ocean_grid=$atmos_grid_source
ocean_grid_folder=$atmos_grid_folder
ocean_data_InputFolder=$atmos_grid_folder
#
# copy grids directly
# (the automatic grid copy section with atmo_dyn_grid from $HGRIDDIR is ignored)
#add_link_file ${atmos_grid_folder}/${atmos_grid_source} ./$atmos_grid_target
add_required_file ${atmos_grid_folder}/${atmos_grid_source} ./$atmos_grid_target
#add_required_file ${ocean_grid_folder}/${ocean_grid} ./
#
#--------------------------------------------------------------------------------------------------


#--------------------------------------------------------------------------------------------------

# (6) Define the model configuration
#-----------------------------------

# JSBACH settings
run_jsbach=no
jsbach_usecase=none
jsbach_with_lakes=no 

# Some further processing for land configuration
# ----------------------------------------------

ljsbach=$([ "${run_jsbach:=no}" == yes ]          && echo .TRUE. || echo .FALSE. )
llake=$([ "${jsbach_with_lakes:=yes}" == yes ]    && echo .TRUE. || echo .FALSE. )
lcarbon=$([ "${jsbach_with_carbon:=yes}" == yes ] && echo .TRUE. || echo .FALSE. )

if [[ $jsbach_usecase == *pfts* ]]
then
  pft_file_tag="11pfts_"
else
  pft_file_tag=""
fi


#--------------------------------------------------------------------------------------------------
# I. coupling section
#--------------------------------------------------------------------------------------------------

if [ $mpi_total_procs -lt 2 ] ; then
  check_error 0 "This setup requires at least 2 mpi processes. Exit"
fi

# I.1 Split the number of total procs and assign to each component
# ----------------------------------------------------------------
oce_min_rank=`expr ${mpi_total_procs} - ${mpi_oce_procs}`
oce_max_rank=`expr ${oce_min_rank} + ${mpi_oce_procs} - 1`
oce_inc_rank=1
atm_min_rank=0
atm_max_rank=`expr ${oce_min_rank} - 1`
atm_inc_rank=1
#
# I.2 Fill model list
# -------------------
#
namelist_list[0]="$atm_namelist"
modelname_list[0]="atmo"
modeltype_list[0]=1
minrank_list[0]=$atm_min_rank
maxrank_list[0]=$atm_max_rank
incrank_list[0]=$atm_inc_rank
#
namelist_list[1]="$oce_namelist"
modelname_list[1]="ocean"
modeltype_list[1]=2
minrank_list[1]=$oce_min_rank
maxrank_list[1]=$oce_max_rank
incrank_list[1]=$oce_inc_rank


# I.3 YAC coupling library configuration
#-----------------------------------------------------------------------------

atm_lag=1
oce_lag=1

# co2_flux and co2_mixing_ratio are listed as transients
# below but are not configured for coupling in the couples
# section. There fields are therefore not considered for
# the search not for the data exchange even if yac_fget and
# yac_fput are called for these fields.
#
# component names in coupling.yaml must (!) match with modelname_list[*]
#
cat > coupling_${EXPNAME}.yaml << EOF
definitions:
  atm2oce: &atm2oce
    src_component: ${modelname_list[0]}
    src_grid: icon_atmos_grid
    tgt_component: ${modelname_list[1]}
    tgt_grid: icon_ocean_grid
    coupling_period: ${couplingTimeStep}
    time_reduction: average
    src_lag: ${atm_lag}
    tgt_lag: ${oce_lag}
  oce2atm: &oce2atm
    src_component: ${modelname_list[1]}
    src_grid: icon_ocean_grid
    tgt_component: ${modelname_list[0]}
    tgt_grid: icon_atmos_grid
    coupling_period: ${couplingTimeStep}
    time_reduction: average
    src_lag: ${oce_lag}
    tgt_lag: ${atm_lag}
  interp_stacks:
    hcsbb_interp_stack: &hcsbb_interp_stack
      interpolation:
        - bernstein_bezier
        - nnn:
            n: 4
            weighted: arithmetic_average
	    gauss_scale: 0.1
        - fixed:
            user_value: -999.9
    conserv_interp_stack: &conserv_interp_stack
      interpolation:
        - conservative:
            order: 1
            enforced_conservation: false
            partial_coverage: true
            normalisation: fracarea
        - fixed:
            user_value: -999.9
    spmap_interp_stack: &spmap_interp_stack
      interpolation:
        - source_to_target_map

timestep_unit: ISO_format
calendar: proleptic-gregorian
coupling:
  - <<: [ *atm2oce, *hcsbb_interp_stack ]
    field: [surface_downward_eastward_stress,
            surface_downward_northward_stress]
#  - <<: [ *atm2oce, *hcsbb_interp_stack ]
#    coupling_period: ${couplingTimeStep}
#    field: [10m_wind_speed]
  - <<: [ *atm2oce, *conserv_interp_stack ]
    field: [surface_fresh_water_flux,
            total_heat_flux,
            atmosphere_sea_ice_bundle]
  - <<: [ *oce2atm, *conserv_interp_stack ]
    field: [sea_surface_temperature,
            eastward_sea_water_velocity,
            northward_sea_water_velocity,
            ocean_sea_ice_bundle]
  - <<: [ *atm2oce, *spmap_interp_stack ]
    field: river_runoff
EOF

#
# yaml file for yac
# -----------------
#
add_required_file ${basedir}/run/coupling_${EXPNAME}.yaml      ./coupling.yaml

#-----------------------------------------------------------------------------
# II. ATMOSPHERE and LAND
#-----------------------------------------------------------------------------
#

# atmosphere namelist
# -------------------
cat > ${atm_namelist} << EOF
!
&coupling_mode_nml
 coupled_to_ocean  = .TRUE.
/
&parallel_nml
 nproma            = ${nproma_atm}
 num_io_procs      = ${mpi_atm_io_procs}
 num_prefetch_proc = 0
 pio_type          = 0
/
&grid_nml
 dynamics_grid_filename = "${atmos_grid_target}"
/
&nh_testcase_nml
 nh_test_name    = 'APEc_nh'  ! test case identifier
 ape_sst_case    = 'sst1'
 rh_at_1000hpa   = 0.30       ! [] initial rel. humidity at 1000 hPa
/
&run_nml
 num_lev          = 47          ! number of full levels
 modelTimeStep    = "${atmTimeStep}"
 ltestcase        = .TRUE.      ! run testcase
 ldynamics        = .TRUE.      ! dynamics
 ltransport       = .TRUE.      ! transport
 iforcing         = 2           ! 0: none, 1: HS, 2: ECHAM, 3: NWP
 output           = 'nml'
 msg_level        = 5           ! level of details report during integration 
 restart_filename = "${EXPNAME}_restart_atm_<rsttime>.nc"
 activate_sync_timers = .TRUE.
 profiling_output = 1           ! aggregated: 1; detailed: 2; in files: 3
/
&extpar_nml
 itopo            = 0           ! 1: read topography from the grid file
 itype_lwemiss    = 0
/
&initicon_nml
!  init_mode        = 2           ! 2: initialize from IFS analysis
 ! ifs2icon_filename= "ifs2icon.nc"
/
&nonhydrostatic_nml
 ndyn_substeps    = $atm_substeps ! dtime/dt_dyn
 damp_height      = 50000.      ! [m]
 rayleigh_coeff   = 1.5000      ! set to +0.0001 for rerun with little change
 vwind_offctr     = 0.2
 divdamp_fac      = 0.004
 exner_expol      = 0.6
/
&interpol_nml
 rbf_scale_mode_ll = 1
/
&sleve_nml
 min_lay_thckn    = 40.         ! [m]
 top_height       = 83000.      ! [m]
 stretch_fac      = 0.9
 decay_scale_1    = 2000.       ! [m]
 decay_scale_2    = 1000.       ! [m]
 decay_exp        = 1.2
 flat_height      = 5000.      ! [m]
/
&diffusion_nml
 hdiff_smag_fac   = 0.15       ! default: 0.015  too high values are very diffusive! Upper limit should be 0.15
/
&transport_nml
 tracer_names     = 'hus','clw','cli'
 ivadv_tracer     =    3 ,   3 ,   3
 itype_hlimit     =    4 ,   4 ,   4
 itype_vlimit     =    3 ,   3 ,   3
 ihadv_tracer     =   52 ,   2 ,   2
/
&echam_phy_nml
!
! domain 1
! --------
!
! atmospheric phyiscs (""=never)
 echam_phy_config(1)%dt_rad = "${radTimeStep}"
 echam_phy_config(1)%dt_vdf = "${atmTimeStep}"
 echam_phy_config(1)%dt_cnv = "${atmTimeStep}"
 echam_phy_config(1)%dt_cld = "${atmTimeStep}"
 echam_phy_config(1)%dt_gwd = "${atmTimeStep}"
 echam_phy_config(1)%dt_sso = ""
!
! atmospheric chemistry (""=never)
 echam_phy_config(1)%dt_mox = "${atmTimeStep}"
 echam_phy_config(1)%dt_car = ""
 echam_phy_config(1)%dt_art = ""
!
! surface (.TRUE. or .FALSE.)
 echam_phy_config(1)%ljsb   = ${ljsbach}
 echam_phy_config(1)%lamip  = .FALSE.
 echam_phy_config(1)%lice   = .TRUE.
 echam_phy_config(1)%lmlo   = .FALSE.
 echam_phy_config(1)%llake  = ${llake}
!
! fix negative humidity
 echam_phy_config(1)%iqneg_d2p = 0
 echam_phy_config(1)%iqneg_p2d = 0
/
&echam_rad_nml
!
! domain 1
! --------
!
 echam_rad_config(1)%isolrad    =  6
 echam_rad_config(1)%fsolrad	=  1.0
 echam_rad_config(1)%irad_h2o   =  1
 echam_rad_config(1)%irad_co2   =  2
 echam_rad_config(1)%frad_co2   = 1.0
 echam_rad_config(1)%frad_ch4   = 1.0
 echam_rad_config(1)%frad_n2o   = 1.0
 echam_rad_config(1)%irad_ch4   =  2
 echam_rad_config(1)%irad_n2o   =  2
 echam_rad_config(1)%irad_o3    =  2          ! constant annual cycle climatology
 echam_rad_config(1)%irad_o2    =  2
 echam_rad_config(1)%irad_cfc11 =  0
 echam_rad_config(1)%irad_cfc12 =  0
 echam_rad_config(1)%irad_aero  =  0
 echam_rad_config(1)%vmr_co2    = 284.317e-6  ! constant volume mixing ratio, default: 348.0e-6
 echam_rad_config(1)%vmr_ch4    = 808.249e-9  ! constant volume mixing ratio, default: 1650.0e-9
 echam_rad_config(1)%vmr_n2o    = 273.021e-9  ! constant volume mixing ratio, default: 306.0e-9
 echam_rad_config(1)%lyr_perp   =  .TRUE.
 echam_rad_config(1)%yr_perp    =  1850
/
&echam_gwd_nml
! echam_gwd_config(1)%emiss_lev	=  20       ! default: 10
/
&echam_sso_nml
! echam_sso_config(1)%gkdrag     = 0.02      ! default: 0.05
! echam_sso_config(1)%gkwake     = 0.02      ! default: 0.05
! echam_sso_config(1)%gklift     = 0.5
/
&echam_vdf_nml
 echam_vdf_config(1)%c_n        = 1.5
 echam_vdf_config(1)%fsl        = 0.5
 echam_vdf_config(1)%pr0	= 1.0	    ! default: 1.0   ! lower values help to avoid negative humidities
/
&echam_cnv_nml
 echam_cnv_config(1)%entrpen    = 0.0002    ! default: 0.0003    (old default:  0.0002)
 echam_cnv_config(1)%cmfctop    = 0.1       ! default: 0.1       (old default:  0.2)
 echam_cnv_config(1)%entrscv    = 0.0003    ! default: 0.0003    (old default:  0.003)
/
&echam_cld_nml
 echam_cld_config(1)%csecfrl    = 0.4e-5     ! threshold for ice and water in clouds, default 5.e-6
 echam_cld_config(1)%ccraut     = 2.0       ! default: 2.0      (old default: 15.0)
 echam_cld_config(1)%ccsaut     = 2.0       ! default: 2.0      (old default: 95.0)
 echam_cld_config(1)%cauloc     = 1.0       ! default: 1.0      (old default: 10.0)
/
&echam_cov_nml
 echam_cov_config(1)%crs        = 0.968     ! Critical relative humidity at surface, default 0.968
 echam_cov_config(1)%crt        = 0.94      ! Critical relative humidity at toa, default 0.8
/
&sea_ice_nml
 hci_layer    = 0.1
 albs         = 0.85         ! Albedo of snow (not melting)
 albsm        = 0.7         ! Albedo of snow (melting)
 albi         = 0.75         ! Albedo of ice (not melting)
 albim        = 0.7         ! Albedo of ice (melting)
/
EOF

#--------------------------------------------------------------------------------------------------

# Define the atmosphere and land input
# ------------------------------------

# model files
#
add_link_file ${basedir}/data/lsdata.nc                                 ./
add_link_file ${basedir}/data/ECHAM6_CldOptProps.nc                     ./

# namelist files
# --------------
add_required_file ${basedir}/run/${atm_namelist}                        ./

# dictionary file for output variable names
#
dict_file="dict.${EXPNAME}"
cat dict.iconam.mpim  > ${dict_file}
add_required_file ${basedir}/run/${dict_file}                           ./

# initial conditions
#
# - atmosphere: ECMWF analysis, 1979-01-01T00:00:00Z
#datadir=${atmo_data_InputFolder}/initial_condition/r0002
#add_link_file ${datadir}/ifs2icon_1979010100_${atmos_refinement}_G.nc   ./ifs2icon.nc
#
# - land: source?, date+time?
#datadir=${atmo_data_InputFolder}/land/aquaplanet
#add_link_file ${datadir}/ic_land_soil_APE_zonmean.nc                           ./ic_land_soil.nc


# boundary conditions
#
# - ozone
# -- for irad_o3=8
#
datadir=${atmo_data_InputFolder}/ozone/r0002
#
#add_link_file ${datadir}/bc_ozone_picontrol.nc                          ./bc_ozone.nc
add_link_file ${atmos_grid_folder}/bc_ozone_picontrol.nc                 ./bc_ozone.nc
#
# - sst and sic
#
datadir=${atmo_data_InputFolder}/sst_and_seaice/aquaplanet
#
#add_link_file $datadir/bc_sic_zonmean.nc                              ./bc_sic.nc
#add_link_file $datadir/bc_sst_zonmean.nc                              ./bc_sst.nc
#
# - ssi and tsi
#
#datadir=${icon_data_poolFolder}/independent/solar_radiation/3.2
#add_link_file ${datadir}/swflux_14band_cmip6_1850-2299-v3.2.nc          ./bc_solar_irradiance_sw_b14.nc
#
datadir=$atmos_grid_folder
add_link_file ${datadir}/swflux_14band_cmip6_picontrol-v3.2.nc          ./bc_solar_irradiance_sw_b14.nc
#
#--------------------------------------------------------------------------------------------------

# (5) Define the output
# ---------------------

# Parameters for all output files
# -------------------------------
cat >> ${atm_namelist} << EOF
&io_nml
  output_nml_dict  = "${dict_file}"
  netcdf_dict      = "${dict_file}"
  itype_pres_msl   = 4
  restart_file_type= 5
! restart_write_mode = "joint procs multifile"  ! not necessary/useful in default r2b4 setup
! lnetcdf_flt64_output = .TRUE.   ! 64 bit output in all files
  lkeep_in_sync = .TRUE.          ! sync after each timestep
! lkeep_in_sync = .FALSE.
/
&dbg_index_nml
  idbg_mxmn        = 2                        ! initialize MIN/MAX  debug output
  idbg_val         = 0                        ! initialize one cell debug output
  idbg_slev        = 1                        ! initialize start level for debug output
  idbg_elev        = 2                        ! initialize end level for debug output
  dbg_lat_in       =  30.0                    ! latitude location of one cell debug output
  dbg_lon_in       = -30.0                    ! longitude location of one cell debug output
  str_mod_tst      ='InterFaceOce'            ! define modules to print out in debug mode
/
EOF

# Define output files
# -------------------
#
# output_<xyz>=yes : yes --> output files for <xyz>, any other value --> no files for <xyz>
#
# 3-dimensional files include 'ps' and 'pfull' to allow the vertical
# interpolation to pressure levels by cdo ap2pl.
#
if [[ "$output_atm_cgrid" == "yes" ]]; then
  #
  cat >> ${atm_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_cgrid"
 filename_format  = "<output_filename>_<levtype_l>"
 filetype         = 5
 remap            = 0
 output_grid      = .TRUE.
 output_start     = "${start_date}"           ! output_start = output_end
 output_end       = "${start_date}"           ! --> write once only irrespective of
 output_interval  = "${atm_output_interval}"  !     the output interval and
 file_interval    = "${atm_file_interval}"    !     the file interval
 ml_varlist       = 'clon', 'clat', 'areacella', 'zghalf', 'zg'
/
EOF
fi

# output atmospheric monitoring
if [[ "$output_atm_mon" == "yes" ]]; then
  cat >> ${atm_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_mon"
 filename_format  = "<output_filename>_<datetime2>"
 filetype         = 5                                ! output format: 2=GRIB2, 4=NETCDFv2, 5=NETCDFv4
 remap            = 0
 mode             = 1                                ! 1: forecast mode (relative t-axis), 2: climate mode (absolute t-axis)
 operation        = 'mean'                           ! mean over output interval
 output_grid      = .FALSE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${atm_output_interval}"
 file_interval    = "${atm_file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'tas_gmean','rsdt_gmean','rsut_gmean','rlut_gmean','radtop_gmean',
                    'prec_gmean','evap_gmean','fwfoce_gmean'
/
EOF
fi

# interface debug output
if [[ "$output_atm_dbg" == "yes" ]]; then
  cat >> ${atm_namelist} <<EOF
&output_nml 
 filetype         = 5                                ! output format: 2=GRIB2, 4=NETCDFv2, 5=NETCDFv4
 output_filename  = "${EXPNAME}_atm_dbg"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 remap            = 0
 operation        = 'mean'
 output_grid      = .TRUE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${atm_output_interval}"
 file_interval    = "${atm_file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'frac_wtr', 'frac_ice',
                    'hs_icecl', 'ts_icecl', 'qtop_icecl','qbot_icecl',
                    'sic_icecl', 'sit_icecl',
                    'albedo_wtr', 'albedo_ice',
                    'albvisdir','albvisdif' , 'albnirdir' , 'albnirdif',
                    'rvds_dir','rvds_dif','rnds_dir','rnds_dif','rvus','rnus',
                    'hfls_wtr', 'hfls_ice',
                    'hfss_wtr', 'hfss_ice',
                    'rsns_wtr', 'rsns_ice',
                    'rlns_wtr', 'rlns_ice',
                    'tauu_wtr', 'tauu_ice',
                    'tauv_wtr', 'tauv_ice'
/
EOF
fi
#
# Standard AMIP output...
#
#
if [[ "$output_atm_3d" == "yes" ]]; then
  #
  cat >> ${atm_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_3d"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 operation        = 'mean'
 output_grid      = .FALSE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${atm_output_interval}"
 file_interval    = "${atm_file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'zg'      ,
                    'ps'      , 'pfull'   ,
                    'rho'     , 'ta'      ,
                    'ua'      , 'va'      , 'wap'     ,
                    'hus'     , 'clw'     , 'cli'     ,
                    'hur'     , 'cl'      ,
!                    'qo3_phy' ,
/
EOF
fi


if [[ "$output_atm_2d" == "yes" ]]; then
  #
  cat >> ${atm_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_atm_2d"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 operation        = 'mean'
 output_grid      = .FALSE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${atm_output_interval}"
 file_interval    = "${atm_file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'orog'    ,
                    'ps'      , 'psl'     ,
                    'cosmu0'  ,
                    'rsdt'    ,
                    'rsut'    , 'rsutcs'  , 'rlut'    , 'rlutcs'  ,
                    'rsds'    , 'rsdscs'  , 'rlds'    , 'rldscs'  ,
                    'rsus'    , 'rsuscs'  , 'rlus'    ,
                    'ts'      ,
                    'sic'     , 'sit'     ,
                    'albedo'  ,
                    'clt'     ,
                    'prlr'    , 'prls'    , 'prcr'    , 'prcs'    ,
                    'pr'      , 'prw'     , 'cllvi'   , 'clivi'   ,
                    'hfls'    , 'hfss'    , 'evspsbl' ,
                    'tauu'    , 'tauv'    ,
                    'sfcwind' , 'uas'     , 'vas'     ,
                    'tas'     , 'dew2'    ,
                    'ptp'
/
EOF
fi


if [[ "$output_phy_3d" == "yes" ]]; then
  #
  cat >> ${atm_namelist} << EOF
&output_nml
 output_filename  = "${EXPNAME}_phy_3d"
 filename_format  = "<output_filename>_<levtype_l>_<datetime2>"
 filetype         = 5
 remap            = 0
 operation        = 'mean'
 output_grid      = .FALSE.
 output_start     = "${start_date}"
 output_end       = "${end_date}"
 output_interval  = "${atm_output_interval}"
 file_interval    = "${atm_file_interval}"
 include_last     = .FALSE.
 ml_varlist       = 'ps'           , 'pfull'        ,
                    'tend_ta'      , 'tend_ta_dyn'  , 'tend_ta_phy'  ,
                    'tend_ta_vdf'  , 'tend_ta_gwd'  , 'tend_ta_sso'  ,
                    'tend_ta_cnv'  , 'tend_ta_cld'  , 
                    'tend_ua'      , 'tend_ua_dyn'  , 'tend_ua_phy'  ,
                    'tend_ua_vdf'  , 'tend_ua_gwd'  , 'tend_ua_sso'  ,
                    'tend_ua_cnv'  ,
                    'tend_va'      , 'tend_va_dyn'  , 'tend_va_phy'  ,
                    'tend_va_vdf'  , 'tend_va_gwd'  , 'tend_va_sso'  ,
                    'tend_va_cnv'  ,
                    'tend_hus'     , 'tend_hus_dyn' , 'tend_hus_phy' ,
                    'tend_hus_cld' , 'tend_hus_cnv' , 'tend_hus_vdf'
/
EOF
fi

#-----------------------------------------------------------------------------
# III. OCEAN and SEA-ICE (and HAMOCC) 
#-----------------------------------------------------------------------------

ocean_vertical_levels=40

#-----------------------------------------------------------------------------
# HAMOCC
#
use_hamocc=no

if [  "x${use_hamocc}"  = "xyes" ]; then
lhamocc=".TRUE."
lbgcadv=".TRUE."
nlev_eu=$ocean_vertical_levels
# set nlev_eu to level belonging to approx 500m
if [ "x$ocean_vertical_levels" = "x40" ];then
nlev_eu=19
fi
if [ "x$ocean_vertical_levels" = "x64" ];then
nlev_eu=26
fi
if [ "x$ocean_vertical_levels" = "x20" ];then
nlev_eu=16
fi
else
lhamocc=".FALSE."
lbgcadv=".FALSE."
fi
l_init_bgc=".false." # Hamocc state variables are in restart
if [[ "$initialiseOcean" == "fromRestart" ]] || [[ "$initialiseOcean" == "fromClimatology" ]]; then
  l_init_bgc=".true." # initialize HAMOCC (HAMOCC state variables are not in restart)
fi
# ----------------------------------------------------------------------------
#
# ocean namelist
# --------------

cat > ${oce_namelist} << EOF
!
&coupling_mode_nml
 coupled_to_atmo             = .TRUE.
/
&parallel_nml
 nproma                      = ${nproma_oce}
 num_io_procs                = ${mpi_oce_io_procs}
 num_prefetch_proc           = 0
 pio_type                    = 0
 p_test_run                  = .FALSE.
 l_fast_sum                  = .TRUE.
/
&grid_nml
 dynamics_grid_filename      = "${ocean_grid}"
 use_dummy_cell_closure      = .TRUE.
 use_duplicated_connectivity = .FALSE.
/
&run_nml
 modelTimeStep               = "${oceTimeStep}"
 output                      = 'nml'                            ! namelist controlled output scheme
 activate_sync_timers        = .TRUE.
 profiling_output            = 1                                ! aggregated: 1; detailed: 2; in files: 3
 msg_timestamp               = .FALSE.
 timers_level                = 10
 debug_check_level           = 1
 restart_filename            = "${EXPNAME}_restart_oce_<rsttime>.nc"
/
EOF
# output of fixed geometry
cat >> ${oce_namelist} << EOF
 &output_nml
  filetype         =  5                               ! output format: 2=GRIB2, 4=NETCDFv2, 5=NETCDFv4
  output_filename  = "${EXPNAME}_oce_fx"
  filename_format  = "<output_filename>_<datetime2>"
  output_start     = "${start_fx}"                    ! start date in ISO-format
  output_end       = "${start_fx}"                    ! end date in ISO-format
  output_interval  = "${oce_output_interval}"         ! interval in ISO-format
  file_interval    = "${oce_file_interval}"           ! interval in ISO-format
  output_grid      = .TRUE.
  mode             =  2                               ! 1: forecast mode (relative t-axis); 2: climate mode
  include_last     = .false.
  !ml_varlist       =  'wet_c','basin_c','regio_c','lsm_ctr_c'
  ml_varlist       =  'group:oce_geometry'
/
EOF
#
if [[ "$output_oce_def" == "yes" ]]; then
   #
   cat >> ${oce_namelist} << EOF
&output_nml
  filetype                   = 5
  output_filename            = "${EXPNAME}_oce_def"
  filename_format            = "<output_filename>_<datetime2>"
  output_start               = "${start_date}"                  ! start in ISO-format
  output_end                 = "${end_date}"                    ! end in ISO-format
  output_interval            = "${oce_output_interval_def}"     ! interval in ISO-format
  file_interval              = "${oce_file_interval}"
  mode                       = 1                                ! 1: forecast mode (relative t-axis)
                                                                ! 2: climate mode (absolute t-axis)
  include_last               = .FALSE.
  output_grid                = .TRUE.
  filename_format            = "<output_filename>_<datetime2>"
  operation                  = "mean"
  ml_varlist                 = 'group:oce_default', 'group:oce_essentials'
/
EOF
fi

if [[ "$output_oce_ice" == "yes" ]]; then
  cat >> ${oce_namelist} <<EOF

&output_nml
  output_start     = "${start_date}"                  ! start date in ISO-format
  output_end       = "${end_date}"                    ! end date in ISO-format
  output_interval  = "${oce_output_interval}"         ! interval in ISO-format
  file_interval    = "${oce_file_interval}"           ! interval in ISO-format
  mode             =  1                               ! 1: forecast mode (relative t-axis), 2: climate mode (absolute t-axis)
  operation        = 'mean'                           ! mean over output interval
  output_grid      = .TRUE.
  output_filename  = "${EXPNAME}_oce_ice"
  filename_format  = "<output_filename>_<datetime2>"
  filetype         =  5                               ! output format: 2=GRIB2, 4=NETCDFv2, 5=NETCDFv4
  m_levels         = "1...7"                          ! surface and some subsurface levels only - approx. 100 m
  ml_varlist       =  'draftave','hi','hs','conc','to','so', 'mld', 'Qtop', 'Qbot', 'u', 'v', 'condep'
/
EOF
fi
#
if [[ "$output_oce_mon" == "yes" ]]; then
   #
   cat >> ${oce_namelist} << EOF
&output_nml
  filetype                   = 4
  output_filename            = "${EXPNAME}_oce_mon"
  filename_format            = "<output_filename>_<datetime2>"
  output_start               = "${start_date}"                  ! start in ISO-format
  output_end                 = "${end_date}"                    ! end in ISO-format
  output_interval            = "${oce_output_interval}"
  file_interval              = "${oce_file_interval}"
  mode                       = 1                                ! 1: forecast mode (relative t-axis)
                                                                ! 2: climate mode (absolute t-axis)
  include_last               = .FALSE.
  output_grid                = .FALSE.
  operation                  = "mean"
  ml_varlist                 = 'group:ocean_monitor'
/
EOF
fi
#
if [[ "$output_oce_moc" == "yes" ]]; then
   #
   cat >> ${oce_namelist} << EOF
&output_nml
  filetype                   = 5
  output_filename            = "${EXPNAME}_oce_moc"
  filename_format            = "<output_filename>_<datetime2>"
  output_start               = "${start_date}"                  ! start in ISO-format
  output_end                 = "${end_date}"                    ! end in ISO-format
  output_interval            = "${oce_output_interval}"
  file_interval              = "${oce_file_interval}"
  mode                       = 1                                ! 1: forecast mode (relative t-axis)
                                                                ! 2: climate mode (absolute t-axis)
  include_last               = .FALSE.
  output_grid                = .FALSE.
  operation                  = "mean"
  ml_varlist                 = 'group:ocean_moc'
/
EOF
fi

if [[ "$output_oce_dbg" == "yes" ]]; then
  cat >> ${oce_namelist} <<EOF

&output_nml
  filetype         =  5                               ! output format: 2=GRIB2, 4=NETCDFv2, 5=NETCDFv4
  output_filename  = "${EXPNAME}_oce_dbg"
  filename_format  = "<output_filename>_<datetime2>"
  output_start     = "${start_date}"                  ! start date in ISO-format
  output_end       = "${end_date}"                    ! end date in ISO-format
  output_interval  = "${oce_output_interval}"         ! interval in ISO-format
  file_interval    = "${oce_file_interval}"           ! interval in ISO-format
  output_grid      = .TRUE.
  mode             =  1                               ! 1: forecast mode (relative t-axis); 2: climate mode
  operation        = 'mean'                           ! mean over output interval
  include_last     = .false.
  m_levels         = "1,2"                            ! surface and subsurface level only
  ml_varlist       =  'Qtop', 'Qbot','Qbot_slow', 'zHeatOceI','heatOceI','heatOceW','draftave','zUnderIce',
                      'mld','condep','zos','u_vint','hi','hs','conc','to','so','u',
                      'HeatFlux_Total','atmos_fluxes_HeatFlux_ShortWave','atmos_fluxes_HeatFlux_LongWave',
                      'HeatFlux_ShortWave','HeatFlux_LongWave','HeatFlux_Sensible','HeatFlux_Latent',
                      'FrshFlux_Runoff','FrshFlux_Precipitation','FrshFlux_Evaporation','FrshFlux_SnowFall',
                      'FrshFlux_TotalOcean','FrshFlux_VolumeIce','totalsnowfall','Wind_Speed_10m',
                      'atmos_fluxes_stress_x','atmos_fluxes_stress_y',
                      'atmos_fluxes_stress_xw','atmos_fluxes_stress_yw'
/
EOF
fi


## HAMMOCC output #####################################
if [  "x${use_hamocc}"  = "xyes" ]; then
#
if [[ "$output_hamocc_mon" == "yes" ]]; then
cat >> ${oce_namelist} << EOF
&output_nml
  output_filename  = "${EXPNAME}_hamocc_monitor"
  filename_format  = "<output_filename>_<datetime2>"
  output_start     = "${start_date}"
  output_end       = "${end_date}"
  output_interval  = "${mon_output_interval}"
  file_interval    = "${hamocc_file_interval}"
  mode             = 1
  output_grid      = .false.
  operation       = 'mean'
  ml_varlist       =  'group:HAMOCC_MONI'
/
EOF
fi
#
if [[ "$output_hamocc_base" == "yes" ]]; then
cat >> ${oce_namelist} << EOF
&output_nml
  filetype         =  4                       ! output format: 2=GRIB2, 4=NETCDFv2
  filename_format  = "<output_filename>_<datetime2>"
  output_filename  = "${EXPNAME}_hamocc"
  output_start     = "${start_date}"                  ! start in ISO-format
  output_end       = "${end_date}"                    ! end in ISO-format
  output_interval  = "${hamocc_output_interval}"
  file_interval    = "${hamocc_file_interval}"
  mode             = 1
  output_grid      = .TRUE.
  operation       = 'mean'
  ml_varlist       =  'group:HAMOCC_BASE'
/
EOF
fi
#
if [[ "$output_hamocc_sed" == "yes" ]]; then
cat >> ${oce_namelist} << EOF
&output_nml
  filetype         =  4                       ! output format: 2=GRIB2, 4=NETCDFv2
  filename_format  = "<output_filename>_<datetime2>"
  output_filename  = "${EXPNAME}_hamocc_sediment"
  output_start     = "${start_date}"                  ! start in ISO-format
  output_end       = "${end_date}"                    ! end in ISO-format
  output_interval  = "${hamocc_output_interval}"
  file_interval    = "${hamocc_file_interval}"
  output_grid      = .TRUE.
  mode             = 1
  operation        = 'mean'
  ml_varlist       =  'group:HAMOCC_SED'
/
EOF
fi
#
if [[ "$output_hamocc_3d" == "yes" ]]; then
cat >> ${oce_namelist} << EOF
&output_nml
  filetype         =  4                       ! output format: 2=GRIB2, 4=NETCDFv2
  filename_format  = "<output_filename>_<datetime2>"
  output_filename  = "${EXPNAME}_hamocc_3d_tendencies"
  output_start     = "${start_date}"                  ! start in ISO-format
  output_end       = "${end_date}"                    ! end in ISO-format
  output_interval  = "${hamocc_output_interval}"
  file_interval    = "${hamocc_file_interval}"
  output_grid      = .TRUE.
  operation        = 'mean'
  mode             = 1
  ml_varlist       =  'HAMOCC_BACFRA','HAMOCC_SRED','HAMOCC_REMIN','HAMOCC_DENIT','HAMOCC_delsil','HAMOCC_delcar','HAMOCC_aou'
/
EOF
fi
#
if [[ "$output_hamocc_EU" == "yes" ]]; then
cat >> ${oce_namelist} << EOF
&output_nml
  filetype         =  4                       ! output format: 2=GRIB2, 4=NETCDFv2
  filename_format  = "<output_filename>_<datetime2>"
  output_filename  = "${EXPNAME}_hamocc_EU_tendencies"
  output_start     = "${start_date}"                  ! start in ISO-format
  output_end       = "${end_date}"                    ! end in ISO-format
  output_interval  = "${hamocc_output_interval}"
  file_interval    = "${hamocc_file_interval}"
  mode             =  1                               ! 1: forecast mode (relative t-axis), 2: climate mode (absolute t-axis)
  output_grid      = .TRUE.
  operation        = 'mean'
  ml_varlist       =  'HAMOCC_NPP','HAMOCC_nfix','HAMOCC_dms_prod','HAMOCC_dms_bac','HAMOCC_dms_uv','HAMOCC_eu_export','HAMOCC_pho_cya','HAMOCC_cya_loss','HAMOCC_grazing','HAMOCC_remin_via_grazer','HAMOCC_exudation_phy','HAMOCC_exudation_zoo','HAMOCC_zoomor','HAMOCC_phymor','HAMOCC_plim','HAMOCC_flim','HAMOCC_nlim','HAMOCC_cTlim','HAMOCC_cLlim','HAMOCC_cPlim','HAMOCC_cFlim'
  m_levels         ='1...${nlev_eu}'  ! ~500m: 19 for L40, 16 for L20, 26 for L64
/
EOF
fi
#
if [[ "$output_hamocc_2d" == "yes" ]]; then
cat >> ${oce_namelist} << EOF
&output_nml
  filetype         =  4                       ! output format: 2=GRIB2, 4=NETCDFv2
  filename_format  = "<output_filename>_<datetime2>"
  output_filename  = "${EXPNAME}_hamocc_2d_tendencies"
  output_start     = "${start_date}"                  ! start in ISO-format
  output_end       = "${end_date}"                    ! end in ISO-format
  output_interval  = "${hamocc_output_interval}"
  mode             =  1                             ! 1: forecast mode (relative t-axis), 2: climate mode (absolute t-axis)
  file_interval    = "${hamocc_file_interval}"
  output_grid      = .TRUE.
  operation        = 'mean'
  ml_varlist       =  'HAMOCC_co2flux','HAMOCC_orginp','HAMOCC_dmsflux','HAMOCC_silinp','HAMOCC_calinp','HAMOCC_o2flux','HAMOCC_n2flux','HAMOCC_n2oflux','HAMOCC_nfix_diag','HAMOCC_coex90','HAMOCC_calex90','HAMOCC_opex90','HAMOCC_coex1000','HAMOCC_opex1000','HAMOCC_calex1000','HAMOCC_coex2000','HAMOCC_opex2000','HAMOCC_calex2000','HAMOCC_o2min','HAMOCC_zo2min'
/
EOF
fi
fi
##############################################################

cat >> ${oce_namelist} << EOF
&dbg_index_nml
  idbg_mxmn                  = 2                                ! initialize MIN/MAX  debug output
  idbg_val                   = 0                                ! initialize one cell debug output
  idbg_slev                  = 1                                ! initialize start level for debug output
  idbg_elev                  = 2                                ! initialize end level for debug output
  dbg_lat_in                 = 30.0                             ! latitude location of one cell debug output
  dbg_lon_in                 = -30.0                            ! longitude location of one cell debug output
  str_mod_tst                ='oceanCouplng'                    ! define modules to print out in debug mode
  !str_mod_tst                = 'all'                            ! define modules to print out in debug mode
/
&ocean_dynamics_nml
! vert_cor_type = 1
! n_zlev         =   ${ocean_vertical_levels}
! 36 unevenly spaced levels used by MPIOM/GR30
  n_zlev         =   35
!dzlev_m(1:10)  =    50.0,   20.0,   20.0,   60.0,  350.0,  500.0, 1000.0, 2000.0, 2000.0, 1440.0,  ! 5720m
!dzlev_m(1:34)  =    12.0,   10.0,   10.0,   10.0,   10.0,   10.0,   13.0,   15.0,   20.0,   25.0,        !135 m
!                    30.0,   35.0,   40.0,   45.0,   50.0,   55.0,   60.0,   70.0,   80.0,   90.0,        !690 m
!                   100.0,  110.0,  120.0,  130.0,  140.0,  150.0,  170.0,  180.0,  190.0,  200.0,        !2180 m
!                   200.0,  200.0,  200.0,  220.0                                                         !3000 m
!dzlev_m(1:36)  =    50.0,   10.0,   10.0,   10.0,   10.0,   20.0,   25.0,                                ! 135 m
!                    30.0,   35.0,   40.0,   45.0,   50.0,   55.0,   60.0,   70.0,   80.0,   90.0,        ! 690 m
!                   100.0,  110.0,  120.0,  130.0,  140.0,  150.0,  170.0,  190.0,  200.0,  200.0,        ! 2200 m
!                   200.0,  200.0,  200.0,  200.0,  200.0,  200.0,  200.0,  200.0,  200.0                 ! 4000 m
dzlev_m(1:35)  =    25.0,   10.0,   10.0,   10.0,   15.0,   20.0,   20.0,                                ! 110 m
                    25.0,   30.0,   35.0,   40.0,   50.0,   60.0,   70.0,   80.0,   90.0,  100.0,        ! 690 m
                   110.0,  120.0,  140.0,  160.0,  180.0,  200.0,  200.0,  200.0,  200.0,  200.0,        ! 2400 m
                   200.0,  200.0,  200.0,  200.0,  200.0,  200.0,  200.0,  200.0                         ! 4000 m
  l_edge_based                               = .FALSE.     ! edge- or cell-based mimetic discretization
! l_partial_cells                            = .FALSE.     ! partial bottom cells=TRUE: local varying bottom depth
  select_solver                              = 4           ! 1=gmres_oce_old; 2=ocean_restart_gmres, 3=mixed precisison restart 
                                                           ! 4=CG (default) 5=CGJ 6=BiCG 7=GMRES restart (legacy) 8=MINRES
  use_absolute_solver_tolerance              = .TRUE.     
  solver_tolerance                           = 1.0E-10     ! this may further be reduced
  l_lhs_direct                               = .TRUE.      ! .true.= use lhs implementation directly  .false.= matrix scanner (default)
  select_lhs                                 = 2           ! 1=operator based (default) 2=matrix based - 2=error?
  solver_FirstGuess                          = 2           ! 0=start from zeros 1=last timestep smoothed 2=last timestep (default) 

  solver_max_iter_per_restart                = 14
  solver_max_restart_iterations              = 100         ! outer (restart solver)

  fast_performance_level                     = 200         ! performance level 12: for cell-based; 5: default
  use_continuity_correction                  = .TRUE.      ! height adjustment according to vertical velocity in dynamics
  cfl_check                                  = .FALSE.
  cfl_write                                  = .FALSE.

  i_bc_veloc_top                             = 1
  i_bc_veloc_bot                             = 1           ! 0: (def) bottom friction off, 1: on
/
&ocean_tracer_transport_nml
  flux_calculation_horz                      = 5           ! 1=upwind, 2=central, 3=Lax-Friedrichs,
                                                           ! 4=Miura, 5=FCT with Zalesak limiter (default)
  flux_calculation_vert                      = 7           ! 6=adpo; 7=upwind biased ppm (default); 8=FCT with zalesak limiter
  ! define low and high order methods to be used in
  ! horizontal flux corrected transport methods
  ! (flux_calculation_horz=4,5)
  fct_low_order_flux                         = 1           ! horizontal low  order method: 1=upwind (def), no other implemented
  fct_high_order_flux                        = 5           ! horizontal high order method: 1=upwind, 2=central, 3=lax_friedrichs, 4=miura_order1
  fct_limiter_horz                           = 100         ! zalesak
/
&ocean_horizontal_diffusion_nml
  laplacian_form                             = 1           ! 1=curlcurl-graddiv
  VelocityDiffusion_order                    = 1           ! 21=biharmonic+laplacian (for the laplacian leith)
                                                           !
!  BiharmonicViscosity_scaling                = 1
!  BiharmonicViscosity_reference              = 1.0E15      ! [m2/s] constant horizontal viscosity coefficient for velocity
!  BiharmonicViscosity_background             = 0.0         ! [m2/s] constant horizontal viscosity coefficient for velocity

  HarmonicViscosity_scaling                  = 1
  HarmonicViscosity_reference                = 5.0E+4      ! [m2/s] constant horizontal viscosity coefficient for velocity
  HarmonicViscosity_background               = 0.0  

  TracerHorizontalDiffusion_scaling          = 1
  Temperature_HorizontalDiffusion_Background = 0.0
  Temperature_HorizontalDiffusion_Reference  = 0
  Salinity_HorizontalDiffusion_Background    = 0.0
  Salinity_HorizontalDiffusion_Reference     = 0
/
&ocean_vertical_diffusion_nml
  vert_mix_type                              = 2
  PPscheme_type                              = 0
  velocity_VerticalDiffusion_background      = 5.0E-5      ! [m2/s]  vertical background viscosity coefficient for velocity
  temperature_VerticalDiffusion_background   = 5.0E-5      ! [m2/s]  vertical background diffusion coefficient for temperature
  salinity_VerticalDiffusion_background      = 5.0E-5      ! [m2/s]  vertical background diffusion coefficient for salinity
  tracer_convection_MixingCoefficient        = 0.1         ! max vertical tracer diffusion for convection used in case of instability
  convection_InstabilityThreshold            = -1.0E-6     ! used in update_ho_params - default=-5e-8
  richardsonDiffusion_threshold              = 0.0         ! used in update_ho_params - default=+5e-8
  tracer_RichardsonCoeff                     = 2.0E-3      ! factor for vertical diffusion coefficient in PP scheme
  velocity_RichardsonCoeff                   = 2.0E-3      ! factor for vertical viscosity coefficient in PP scheme
  bottom_drag_coeff                          = 3.0E-3      ! default=2.5E-3; active for i_bc_veloc_bot=1
  use_wind_mixing                            = .TRUE.      ! TRUE: use wind mixing scheme in MPIOM-type pp-scheme
  lambda_wind                                = 0.03
  tracer_TopWindMixing                       = 0.5E-3
  velocity_TopWindMixing                     = 0.5E-3
  TKE_min                                    = 0.4E-5
  c_k                                        = 0.5
/
&ocean_GentMcWilliamsRedi_nml
  GMRedi_configuration                       = 1           ! 0=cartesian diffusion; 1=GM-Redi: bolus advection + isopycnal diffusion
  tapering_scheme                            = 1
  GMRedi_usesRelativeMaxSlopes               = .FALSE.
  S_max                                      = 3.0e-4      ! 1.0
  S_d                                        = 1.0e-4      ! 5e-3 to 5e-4
                                                           !
  k_tracer_GM_kappa_parameter                = 1000.0      !
  k_tracer_isoneutral_parameter              = 1000.0      ! value for cell-based cartesian diffusion - mpiom: 1000/400km = 400/160km
  k_tracer_dianeutral_parameter              = 0.0         ! 1.0E-5  !
                                                           !
  switch_off_diagonal_vert_expl              = .TRUE.
  gmredi_combined_diagnostic                 = .FALSE.
! switch_on_redi_balance_diagnostic          = .FALSE.     ! not yet available in icon-aes-dyamond++
  revert_vertical_recon_and_transposed       = .TRUE.
  slope_calc_via_temperture_salinity         = .TRUE.
  include_slope_squared_implicit             = .TRUE.      ! think of l_with_vert_tracer_diffusion
  switch_on_tapering_horizontal_diffusion    = .TRUE.
/
&ocean_physics_nml
  i_sea_ice                                  = 1           ! 0 = no sea ice; 1 = sea ice model on; default=1
  lhamocc                                    = ${lhamocc}
  lbgcadv                                    = ${lbgcadv}
/                                           
&sea_ice_nml
  i_ice_therm                                = 1           ! 1=zero-layer (default), 2=Winton, 0/2: not allowed
  i_ice_dyn                                  = 1           ! 1/0=switch on/off AWI ice dynamics
! i_Qio_type                                 = 3           ! 3 (default): energy of whole grid-area used for melting (MPIOM-type)
! use_constant_tfreez                        = .TRUE.      ! default: TRUE
! use_no_flux_gradients                      = .FALSE.     ! default: TRUE
 leadclose_1                                = 0.25        ! default: 0.5 - value of MPIOM: 0.25
 leadclose_2n                               = 0.66       ! default: 0.0 - value of MPIOM: 2/3
/
EOF

## HAMOCC namelist ########################################
if [  "x${use_hamocc}"  = "xyes" ]; then
cat >> ${oce_namelist} << EOF
&hamocc_nml
l_cyadyn                          = .TRUE.    ! dynamic cyanobacteria
l_cpl_co2                         = .FALSE.   ! CO2 coupled to land carbon cycle
l_bgc_check                       = .FALSE.   ! mass check at every time step
deltacalc                         = 825.0        ! CaCO3 weathering rate [kmol/s] 
deltaorg                          = 14.0        ! OC weathering rate [kmol/s]
deltasil                          = 382.0        ! Si(OH)4 weathering rate [kmol/s]
atm_co2                           = 284.3      ! atmospheric CO2 (default 278)
atm_n2                            = 802000.   ! atmospheric N2  (default 802000)
atm_o2                            = 196800.   ! atmospheric O2  (default 196800)
sinkspeed_opal                    = 25.       ! opal sinking speed [m/d] (default 30)
sinkspeed_calc                    = 30.       ! calc sinking speed [m/d] (default 30)
i_settling                        = 1         ! 0 constant POC sinking speed, 1 Martin curve, 2 AGG module (not yet implemented)
sinkspeed_poc                     = 5.        ! detritus sinking speed [m/d] for i_settling=0 (default 5)
sinkspeed_martin_ez               = 3.5       ! detritue sinking speed within (0, mc_depth) [m/d] for i_settling=1 (default 3.5)
mc_depth                          = 100.      ! depth where linear increase of sinking speed starts for i_settling=1 (default 100.)
mc_fac                            = 2.0       ! slope of sinking speed increase relative to remin rate (default 2.0)
l_implsed                         =.FALSE.    ! implicit sediment formulation
cycdec                            = 0.06
cya_growth_max                    = 0.32
grazra                            = 0.7
drempoc                           = 0.015
calmax                            = 0.24
bkcya_p                           = 5.0e-8
l_init_bgc                        = ${l_init_bgc}
hion_solver                       = 1
/
EOF
fi
############################################################

cat >> ${oce_namelist} << EOF
&ocean_forcing_nml
  iforc_oce                                  = 14          ! ocean forcing: 14 from coupling via YAC
  type_surfRelax_Temp                        = -1          ! -1: use net surface heat flux from atmosphere
                                                           !  0: no relaxation used
                                                           !  1: relaxation switched on for reading (init_oce_relax=1)
                                                           !     or some testcases only
  forcing_enable_freshwater                  = .TRUE.      ! enable/disable freshwater flux
  forcing_windstress_u_type                  = 2           ! 0: zero wind stress, 1: read from file, 2: none
  forcing_windstress_v_type                  = 2           ! 0: zero wind stress, 1: read from file, 2: none
                                                           ! salt-change due to internal fluxes only
  limit_seaice                               = .TRUE.      ! default: TRUE
!  seaice_limit                               = 16.667     ! free with z*, limit to 200m
  seaice_limit                               = 0.8         ! hard limit set to 80% of upper layer for sea ice
  lfix_salt_content                          = .TRUE.
  limit_elevation                            = .FALSE.     ! true: adjust daily to zero, default=false: free surface
! lswr_jerlov                                = .FALSE.     ! SW-penetration (Jerlov-radiation, default=T)
/
EOF
#
if [[ "$initialiseOcean" == "fromRestart" ]] || [[ "$initialiseOcean" == "fromRestartwithHamocc" ]]; then
  #
  cat >> ${oce_namelist} << EOF
&ocean_initialConditions_nml
  initial_salinity_type                      = 0                ! 0: none, 1: read S from initial_state.nc
  initial_temperature_type                   = 0                ! 0: none, 1: read T from initial_state.nc
  initialize_fromRestart                     = .TRUE.
/
EOF
#
else
#
  if [[ "$initialiseOcean" == "fromClimatology" ]]; then
    cat >> ${oce_namelist} << EOF
&ocean_initialConditions_nml
  initial_salinity_type                      = 1                ! 0: none, 1: read S from initial_state.nc
  initial_temperature_type                   = 1                ! 0: none, 1: read T from initial_state.nc
  initialize_fromRestart                     = .FALSE.
/
EOF
  else
    cat >> ${oce_namelist} << EOF
&ocean_initialConditions_nml
  initial_salinity_type                      = 0                ! 0: none, 1: read S from initial_state.nc
  initial_temperature_type                   = 0                ! 0: none, 1: read T from initial_state.nc
  initialize_fromRestart                     = .FALSE.
/
EOF
  fi
fi
#
cat >> ${oce_namelist} << EOF
&ocean_diagnostics_nml
  diagnostics_level                          = 1
  diagnose_for_horizontalVelocity            = .FALSE.
  diagnose_for_heat_content                  = .TRUE.
/
&io_nml
  restart_file_type                          = 5
  write_last_restart                         = .TRUE.
! restart_write_mode                         = "joint procs multifile"  ! not yet available in ocean model
! lnetcdf_flt64_output = .TRUE.                                 ! 64 bit output in all files
  lkeep_in_sync                              = .TRUE.           ! sync after each timestep
/
EOF

add_required_file ${basedir}/run/${oce_namelist} ./

#-----------------------------------------------------------------------------
#
# Ocean initialisation input
#
#if [[ "$initialiseOcean" == "fromRestart" ]]; then
  # does not exist yet
#fi
#
if [[ "$initialiseOcean" == "fromClimatology" ]]; then
  # Input_Prototype
  add_link_file ${atmos_grid_folder}/initial_state_grid_${atmos_gridID}_APE_10deg.nc initial_state.nc
fi
#
#-----------------------------------------------------------------------------

if [ $mpi_total_procs -lt `expr $mpi_oce_procs + 1` ] ; then
   echo "Too few mpi_total_procs for requested mpi_oce_procs."
   echo "-> check mpi_total_procs and mpi_oce_procs. Exiting."
   check_error 0
   exit
fi

#-----------------------------------------------------------------------------
#
# Following: automatically appended section to start the model integration. 
#
