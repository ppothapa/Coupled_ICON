#!/bin/bash

# Usage: list_part_tolerance listname
# generate tolerances for all experiments.
#
# Usage: list_part_tolerance listname SINGLE_EXPERIMENT
# Generate tolerance experiments for just one experiment
# SINGLE_EXPERIMENT should not start with `exp.`

# This script generates the ensemble runscript templates needed for computing
# probtest tolerances and adds them to the list specified by `listname`.
# Note: This list must always be called as part of a full `create_list_<list>`,
#       it does not initialize any machines and builders.

# abort on error
set -euo pipefail

cd $(dirname "${BASH_SOURCE[0]}")

# get the ICON root directory
basedir=$(cd ../.. && pwd)
    
# set path to probtest entry script
PROBTEST=$basedir/externals/probtest/probtest.py

# get list name from argument
listname=$1
# get experiment Name from argument if given
SINGLE_EXPERIMENT=${2-}

# collect a whitespace seperated list of all pp.generate_tolerance scripts.
# The following arrays are associated arrays with builders as keys
declare -A pp_gentol_experiments
declare -A tolerance_experiments


add_tolerance_exp () {
    # rename function arguments for clarity
    exp=$1
    builders=$2

    # generating iteratble array of builders
    IFS=' ' read -ra builders_array <<< "$builders"

    for builder in "${builders_array[@]}"
    do
      echo $builder
      # define member_ids (must be in sync with add_refgen_routines)
      if [[ $builder == *"mixed"* ]];
      then
        member_ids=(mixed_1 mixed_2 mixed_3 mixed_4 mixed_5 mixed_6 mixed_7 mixed_8 mixed_9 mixed_10)
        member_ids_string="$(IFS=, ; echo "${member_ids[*]}")"
        perturb_amplitude=1e-7
      else
        member_ids=(double_1 double_2 double_3 double_4 double_5 double_6 double_7 double_8 double_9 double_10)
        member_ids_string="$(IFS=, ; echo "${member_ids[*]}")"
        perturb_amplitude=1e-14
      fi

      # initialize probtest namelist (most of it is unused, but makes life easier)
      $PROBTEST init \
        --codebase-install "${basedir}" \
        --experiment-name "${exp}" \
        --member_ids "${member_ids_string}" \
        --perturb-amplitude "${perturb_amplitude}"

      # create the runscripts for the ensemble (exp.<EXP>_seed_N)
      # needs to be overwritten from namelist because here we deal with the templates
      $PROBTEST run-ensemble \
        --dry \
        --run-script-name "exp.${exp}" \
        --perturbed-run-script-name "exp.${exp}_member_id_{member_id}"

      # add base experiment and tolerance generation script
      ./addexp exp.${exp} --builders "${builder}" --list $listname --runflags "tolerance_run=true"

      # Make a copy of the generic pp.generate_tolerance for each exp. This copy is needed as unique identifier in adddep.
      pp_gentol="tolerance/pp.generate_tolerance_${exp}"
      cp "${basedir}/run/tolerance/pp.generate_tolerance" "${basedir}/run/$pp_gentol"
      ./addexp "$pp_gentol" --builders "${builder}" --list $listname

      # create the list of perturbed experiments
      perturbed_experiments=$(printf "exp.${exp}_member_id_%s " "${member_ids[@]}")

      # add all the ensemble experiments and make generate_tolerance depend on all of them
      ./addexp "${perturbed_experiments}" --builders "${builder}" --list $listname --runflags "tolerance_run=true"
      ./adddep --from-experiment "$pp_gentol" --to-experiment "${perturbed_experiments}" --builders "${builder}" --list $listname
      pp_gentol_experiments[$builder]="${pp_gentol_experiments[$builder]:-} $pp_gentol"
      tolerance_experiments[$builder]="${tolerance_experiments[$builder]:-},$exp"
    done
}

if [[ -n "$SINGLE_EXPERIMENT" ]]; then
  add_tolerance_exp "$SINGLE_EXPERIMENT" "$BB_NAME"

  pp=tolerance/pp.collect_tolerance_hashes
  ./addexp "$pp" --builders "$BB_NAME" --list "$listname" --runflags "tolerance_experiments=$SINGLE_EXPERIMENT generate_hash_file=no"
  ./adddep --from-experiment "$pp" --to-experiment "${pp_gentol_experiments[$builder]}" --builders "$BB_NAME" --list "$listname"

else
  add_tolerance_exp mch_ch_lowres "balfrin_cpu_nvidia balfrin_cpu_nvidia_mixed DAINT_CPU_nvidia"
  add_tolerance_exp mch_opr_r04b07 "balfrin_cpu_nvidia balfrin_cpu_nvidia_mixed DAINT_CPU_nvidia DAINT_CPU_nvidia_mixed"
  add_tolerance_exp mch_opr_r04b07_lhn_00 "balfrin_cpu_nvidia balfrin_cpu_nvidia_mixed DAINT_CPU_nvidia DAINT_CPU_nvidia_mixed"
  add_tolerance_exp mch_opr_r04b07_lhn_12_emvorado "balfrin_cpu_nvidia balfrin_cpu_nvidia_mixed"
  add_tolerance_exp mch_opr_r04b07_nest "balfrin_cpu_nvidia balfrin_cpu_nvidia_mixed  DAINT_CPU_nvidia"
  add_tolerance_exp mch_ch_r04b09_dace "balfrin_cpu_nvidia DAINT_CPU_nvidia"
  add_tolerance_exp mch_ch_r04b09_dace_synsat "DAINT_CPU_nvidia"
  add_tolerance_exp mch_opr_r04b07_sstice_inst "balfrin_cpu_nvidia balfrin_cpu_nvidia_mixed DAINT_CPU_nvidia DAINT_CPU_nvidia_mixed"
  add_tolerance_exp mch_opr_r19b07_lpi "balfrin_cpu_nvidia balfrin_cpu_nvidia_mixed DAINT_CPU_nvidia DAINT_CPU_nvidia_mixed"
  add_tolerance_exp mch_icon-ch2_small "balfrin_cpu_nvidia balfrin_cpu_nvidia_mixed"
  add_tolerance_exp mch_opr_r19b07_2m "balfrin_cpu_nvidia balfrin_cpu_nvidia_mixed DAINT_CPU_nvidia"
  add_tolerance_exp mch_opr_r19b07_2m_gscp5 "balfrin_cpu_nvidia balfrin_cpu_nvidia_mixed DAINT_CPU_nvidia"
  add_tolerance_exp mch_opr_r19b07_2m_expl "balfrin_cpu_nvidia balfrin_cpu_nvidia_mixed DAINT_CPU_nvidia"
  add_tolerance_exp mch_opr_r19b07_turb "balfrin_cpu_nvidia balfrin_cpu_nvidia_mixed DAINT_CPU_nvidia"
  add_tolerance_exp mch_opr_r19b07_midnight "balfrin_cpu_nvidia balfrin_cpu_nvidia_mixed DAINT_CPU_nvidia DAINT_CPU_nvidia_mixed"
  add_tolerance_exp mch_bench_r19b07_dev_sppt "balfrin_cpu_nvidia balfrin_cpu_nvidia_mixed DAINT_CPU_nvidia DAINT_CPU_nvidia_mixed"
  add_tolerance_exp mch_kenda-ch1_small "balfrin_cpu_nvidia balfrin_cpu_nvidia_mixed"
  add_tolerance_exp mch_pollen_test "balfrin_cpu_nvidia balfrin_cpu_nvidia_mixed"
  add_tolerance_exp atm_qubicc_nc_test "DAINT_CPU_nvidia DAINT_CPU_cce DAINT_CPU_nvidia_mixed"
  #add_tolerance_exp atm_ape_test "DAINT_CPU_nvidia DAINT_CPU_cce DAINT_CPU_nvidia_mixed"
  add_tolerance_exp exclaim_ape_R02B04 "DAINT_CPU_nvidia"
  add_tolerance_exp dwd_run_ICON_09_R2B4N5_EPS "balfrin_cpu_nvidia"

  for builder in "${!pp_gentol_experiments[@]}"
  do

    pp=tolerance/pp.collect_tolerance_hashes
    # strip leading comma
    te=${tolerance_experiments[$builder]#,}

    ./addexp "$pp" --builders "$builder" --list "$listname" --runflags "tolerance_experiments=$te"
    ./adddep --from-experiment "$pp" --to-experiment "${pp_gentol_experiments[$builder]}" --builders "$builder" --list "$listname"
  done
fi

